

function sampler(inputSampleRate,callback){
this.inputBuffer=[];

this.feed=function(inputFrame) {
	for (let i = 0; i < inputFrame.length; i++) {
        this.inputBuffer.push((inputFrame[i]) * 32767);
    }


    const PV_SAMPLE_RATE = 16000;
    const PV_FRAME_LENGTH = 512;

    while ((this.inputBuffer.length * PV_SAMPLE_RATE / inputSampleRate) > PV_FRAME_LENGTH) {
        let outputFrame = new Int16Array(PV_FRAME_LENGTH);
        let sum = 0;
        let num = 0;
        let outputIndex = 0;
        let inputIndex = 0;

        while (outputIndex < PV_FRAME_LENGTH) {
            sum = 0;
            num = 0;
            while (inputIndex < Math.min(this.inputBuffer.length, (outputIndex + 1) * inputSampleRate / PV_SAMPLE_RATE)) {
                sum += this.inputBuffer[inputIndex];
                num++;
                inputIndex++;
            }
            outputFrame[outputIndex] = sum / num;
            outputIndex++;
        }

		callback(outputFrame);
		
        this.inputBuffer = this.inputBuffer.slice(inputIndex);
    }
}

}
module.exports=sampler;

/*
let wavdecoder=require("wav-decoder");
let fs=require("fs");

wavdecoder.decode(fs.readFileSync("ring.wav")).then((wav)=>{
	console.log(wav)
	
let s=new sampler(wav.sampleRate,(frame)=>{
	console.log(frame.length)
	
});
for(let i=0;i<wav.channelData[0].length;i+=1024)
s.feed(wav.channelData[0].slice(i,i+1024));

	
})
*/